import org.apache.tools.ant.taskdefs.condition.Os

/*
 * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

apply plugin: 'java'

description = 'Ballerina - GraphQL Compiler Plugin Tests'

def ballerinaModulePath = "${project.rootDir}/ballerina/"
def ballerinaDistPath = "${ballerinaModulePath}/build/target/extracted-distributions/jballerina-tools-zip/jballerina-tools-${ballerinaLangVersion}"
def ballerinaDist = "${buildDir}/target/ballerina-distribution"
def examples = ["snowtooth"]

dependencies {
    implementation group: 'org.ballerinalang', name: 'ballerina-lang', version: "${ballerinaLangVersion}"
    implementation group: 'org.ballerinalang', name: 'ballerina-tools-api', version: "${ballerinaLangVersion}"
    implementation group: 'org.ballerinalang', name: 'ballerina-parser', version: "${ballerinaLangVersion}"
    implementation group: 'org.testng', name: 'testng', version: "${testngVersion}"
}

task copyDistribution(type: Copy) {
    from ballerinaDistPath
    into ballerinaDist
}

task copyPackageBala {
    doLast {
        copy {
            from "${ballerinaModulePath}/build/cache_parent"
            into "${ballerinaDist}/repo"
            copy {
                into("bala/ballerina") {
                    from "bala/ballerina"
                }
            }
            copy {
                into("cache/ballerina/") {
                    from "cache/ballerina"
                }
            }
        }
    }
}

clean {
    examples.forEach { example ->
        delete "${projectDir}/${example}/target"
    }
}

task testExamples {
    doLast {
        examples.each { example ->
            try {
                exec {
                    workingDir project.projectDir
                    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                        commandLine 'cmd', '/c', "${ballerinaDist}/bin/bal.bat build ${example} && exit %%ERRORLEVEL%%"
                    } else {
                        commandLine 'sh', '-c', "${ballerinaDist}/bin/bal build ${example}"
                    }
                }
            } catch (Exception e) {
                println("Example '${example}' Build failed: " + e.message)
                throw e
            } finally {
                commitDependenciesTomlFile(example)
            }
        }
    }
}

task buildExamples {
    gradle.taskGraph.whenReady { graph ->
        if (graph.hasTask(":graphql-examples:test")) {
            buildExamples.enabled = false
        } else {
            testExamples.enabled = false
        }
    }
    doLast {
        examples.each { example ->
            try {
                exec {
                    workingDir project.projectDir
                    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                        commandLine 'cmd', '/c', "${ballerinaDist}/bin/bal.bat build --skip-tests ${example} && exit %%ERRORLEVEL%%"
                    } else {
                        commandLine 'sh', '-c', "${ballerinaDist}/bin/bal build --skip-tests ${example}"
                    }
                }
            } catch (Exception e) {
                println("Example '${example}' Build failed: " + e.message)
                throw e
            } finally {
                commitDependenciesTomlFile(example)
            }
        }
    }
}

def commitDependenciesTomlFile(String example) {
    project.exec {
        ignoreExitValue true
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            commandLine 'cmd', '/c', "git commit ${example}/Dependencies.toml -m \"[Automated] Commit the Dependencies.toml file\""
        } else {
            commandLine 'sh', '-c', "git commit ${example}/Dependencies.toml -m '[Automated] Commit the Dependencies.toml file'"
        }
    }
}

copyDistribution.dependsOn ":graphql-ballerina:build"
copyPackageBala.dependsOn copyDistribution
buildExamples.dependsOn copyPackageBala
testExamples.dependsOn copyPackageBala
test.dependsOn testExamples
build.dependsOn buildExamples
